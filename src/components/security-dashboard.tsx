"use client"

import { useState, useEffect } from "react"
import {
  Shield,
  Play,
  RotateCcw,
  Search,
  CheckCircle2,
  Circle,
  Loader2,
  XCircle,
  FileText,
  AlertCircle,
} from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { ThemeToggle } from "@/components/theme-toggle"
import { LanguageToggle, type Language } from "@/components/language-toggle"
import { ResultCard } from "@/components/result-card"
import { JsonViewer } from "@/components/json-viewer"
import { useTranslation } from "@/lib/translations"
import type { PhaseResult, ReportResponse } from "@/lib/types"

type PhaseStatus = "idle" | "running" | "completed" | "error"

type TargetValidationStatus = "unknown" | "valid" | "invalid"

export function SecurityDashboard() {
  const [language, setLanguage] = useState<Language>("en")
  const [url, setUrl] = useState("")
  const [isScanning, setIsScanning] = useState(false)
  const [currentPhase, setCurrentPhase] = useState<string | null>(null)
  const [phaseResults, setPhaseResults] = useState<PhaseResult[]>([])
  const [phaseStatuses, setPhaseStatuses] = useState<Record<string, PhaseStatus>>({
    preengagement: "idle",
    reconnaissance: "idle",
    scanning: "idle",
    vulnerability: "idle",
    exploitation: "idle",
  })
  const [selectedPhaseForJson, setSelectedPhaseForJson] = useState<string | null>(null)
  const [isGeneratingReport, setIsGeneratingReport] = useState(false)
  const [generatedReport, setGeneratedReport] = useState<ReportResponse | null>(null)
  const [hasAutoGeneratedReport, setHasAutoGeneratedReport] = useState(false)
  const [targetValidation, setTargetValidation] = useState<TargetValidationStatus>("unknown")

  const t = useTranslation(language)
  const API_URL = process.env.NEXT_PUBLIC_API_URL || "http://localhost:8000"

  const phases = [
    { id: "preengagement", name: t.steps.preengagement },
    { id: "reconnaissance", name: t.steps.reconnaissance },
    { id: "scanning", name: t.steps.scanning },
    { id: "vulnerability", name: t.steps.vulnerability },
    { id: "exploitation", name: t.steps.exploitation },
  ]

  const runPhase = async (phaseId: string): Promise<PhaseResult> => {
    setCurrentPhase(phaseId)
    setPhaseStatuses((prev) => ({ ...prev, [phaseId]: "running" }))

    try {
      const clientId = `client-${Date.now()}`
      const response = await fetch(`${API_URL}/api/v1/phases/${phaseId}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ target: url, client_id: clientId }),
      }).catch((error) => {
        throw new Error(
          `Network error: Unable to connect to API server. Please ensure the backend is running at ${API_URL}`,
        )
      })

      if (!response.ok) {
        const errorText = await response.text().catch(() => "Unknown error")
        throw new Error(`Phase ${phaseId} failed: ${response.status} ${errorText}`)
      }

      const result: PhaseResult = await response.json()
      setPhaseResults((prev) => [...prev, result])
      setPhaseStatuses((prev) => ({ ...prev, [phaseId]: "completed" }))
      return result
    } catch (error) {
      console.error(`[v0] Phase ${phaseId} error:`, error)
      setPhaseStatuses((prev) => ({ ...prev, [phaseId]: "error" }))
      throw error
    }
  }

  const generateReport = async () => {
    if (phaseResults.length === 0) return

    setIsGeneratingReport(true)
    try {
      const clientId = phaseResults[0]?.client_id || `client-${Date.now()}`
      const response = await fetch(`${API_URL}/api/v1/reports/generate`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ target: url, client_id: clientId }),
      }).catch((error) => {
        throw new Error(`Network error: Unable to connect to API server at ${API_URL}`)
      })

      if (!response.ok) {
        const errorText = await response.text().catch(() => "Unknown error")
        throw new Error(`Report generation failed: ${response.status} ${errorText}`)
      }

      const report: ReportResponse = await response.json()
      setGeneratedReport(report)
    } catch (error) {
      console.error("[v0] Report generation error:", error)
      alert(`Failed to generate report: ${error instanceof Error ? error.message : "Unknown error"}`)
    } finally {
      setIsGeneratingReport(false)
    }
  }

  const startScan = async () => {
    if (!url) return

    setIsScanning(true)
    setPhaseResults([])
    setSelectedPhaseForJson(null)
    setGeneratedReport(null)
    setHasAutoGeneratedReport(false)
    setTargetValidation("unknown")
    setPhaseStatuses({
      preengagement: "idle",
      reconnaissance: "idle",
      scanning: "idle",
      vulnerability: "idle",
      exploitation: "idle",
    })

    try {
      // Run pre-engagement phase first
      const preEngagementResult = await runPhase("preengagement")

      // Check if target is available
      const isAvailable = preEngagementResult.results?.is_available

      if (isAvailable === false) {
        // Target is invalid, stop the scan
        setTargetValidation("invalid")
        console.log("[v0] Target is invalid (is_available: false), stopping scan")
        setIsScanning(false)
        setCurrentPhase(null)
        return
      }

      // Target is valid, continue with remaining phases
      setTargetValidation("valid")
      console.log("[v0] Target is valid (is_available: true), continuing scan")

      // Run remaining phases
      for (let i = 1; i < phases.length; i++) {
        await runPhase(phases[i].id)
      }
    } catch (error) {
      console.error("[v0] Scan failed:", error)
    } finally {
      setIsScanning(false)
      setCurrentPhase(null)
    }
  }

  const reset = () => {
    setUrl("")
    setIsScanning(false)
    setCurrentPhase(null)
    setPhaseResults([])
    setSelectedPhaseForJson(null)
    setGeneratedReport(null)
    setHasAutoGeneratedReport(false)
    setTargetValidation("unknown")
    setPhaseStatuses({
      preengagement: "idle",
      reconnaissance: "idle",
      scanning: "idle",
      vulnerability: "idle",
      exploitation: "idle",
    })
  }

  const getPhaseIcon = (status: PhaseStatus) => {
    switch (status) {
      case "completed":
        return <CheckCircle2 className="h-5 w-5 text-green-400" />
      case "running":
        return <Loader2 className="h-5 w-5 text-neon-cyan animate-spin" />
      case "error":
        return <XCircle className="h-5 w-5 text-red-400" />
      default:
        return <Circle className="h-5 w-5 text-muted-foreground" />
    }
  }

  const togglePhaseJson = (phaseId: string) => {
    setSelectedPhaseForJson(selectedPhaseForJson === phaseId ? null : phaseId)
  }

  const getSelectedPhaseResult = () => {
    if (!selectedPhaseForJson) return null
    return phaseResults.find((r) => r.phase === selectedPhaseForJson)
  }

  useEffect(() => {
    const allPhasesCompleted = phases.every((phase) => phaseStatuses[phase.id] === "completed")

    if (allPhasesCompleted && !isScanning && !hasAutoGeneratedReport && phaseResults.length === phases.length) {
      console.log("[v0] All phases completed, auto-generating report...")
      setHasAutoGeneratedReport(true)
      generateReport()
    }
  }, [phaseStatuses, isScanning, hasAutoGeneratedReport, phaseResults.length])

  return (
    <div className="min-h-screen futuristic-bg">
      <header className="border-b border-neon-cyan/20 backdrop-blur-md bg-card/30">
        <div className="container mx-auto px-4 sm:px-6 py-4 flex flex-col sm:flex-row items-center justify-between gap-4">
          <div className="flex items-center gap-3">
            <div className="p-2 rounded-lg bg-neon-cyan/10 border border-neon-cyan/30">
              <Shield className="h-5 w-5 sm:h-6 sm:w-6 text-neon-cyan" />
            </div>
            <div>
              <h1 className="text-lg sm:text-xl font-bold neon-text">SECSCAN PRO</h1>
              <p className="text-xs text-muted-foreground font-mono hidden sm:block">Security Analysis Platform</p>
            </div>
          </div>
          <div className="flex items-center gap-2 sm:gap-4">
            <div className="flex items-center gap-2 px-3 sm:px-4 py-2 rounded-lg border border-neon-cyan/30 bg-neon-cyan/5">
              <div className="h-2 w-2 rounded-full bg-green-400 animate-pulse" />
              <span className="text-xs sm:text-sm font-mono text-neon-cyan">ONLINE</span>
            </div>
            <LanguageToggle language={language} onLanguageChange={setLanguage} />
            <ThemeToggle />
          </div>
        </div>
      </header>

      <main className="container mx-auto px-4 sm:px-6 py-6 sm:py-8">
        <div className="glow-card rounded-xl p-4 sm:p-6 mb-6">
          <div className="flex flex-col sm:flex-row gap-3">
            <div className="relative flex-1">
              <Search className="absolute left-4 top-1/2 -translate-y-1/2 h-4 w-4 sm:h-5 sm:w-5 text-neon-cyan/50" />
              <Input
                type="url"
                placeholder={t.urlPlaceholder}
                value={url}
                onChange={(e) => setUrl(e.target.value)}
                disabled={isScanning}
                className="h-12 sm:h-14 pl-10 sm:pl-12 text-base sm:text-lg bg-background/50 border-neon-cyan/30 focus:border-neon-cyan rounded-lg"
              />
            </div>
            <div className="flex gap-3">
              <Button
                onClick={startScan}
                disabled={isScanning || !url}
                size="lg"
                className="flex-1 sm:flex-none h-12 sm:h-14 px-6 sm:px-8 gap-2 bg-neon-cyan/20 hover:bg-neon-cyan/30 border border-neon-cyan/50 text-neon-cyan font-semibold rounded-lg"
              >
                <Play className="h-4 w-4 sm:h-5 sm:w-5" />
                <span className="hidden sm:inline">{t.startScan}</span>
                <span className="sm:hidden">Scan</span>
              </Button>
              {phaseResults.length > 0 && (
                <Button
                  onClick={reset}
                  variant="outline"
                  size="lg"
                  className="h-12 sm:h-14 px-4 sm:px-6 border-neon-cyan/30 hover:border-neon-cyan/50 bg-transparent rounded-lg"
                >
                  <RotateCcw className="h-4 w-4 sm:h-5 sm:w-5" />
                </Button>
              )}
            </div>
          </div>
        </div>

        {(isScanning || phaseResults.length > 0) && (
          <div className="grid grid-cols-1 lg:grid-cols-4 gap-4 sm:gap-6">
            <div className="lg:col-span-1 space-y-3">
              <div className="glow-card rounded-xl p-4">
                <h3 className="text-sm font-semibold text-neon-cyan mb-4 flex items-center gap-2">
                  <div className="h-1 w-1 rounded-full bg-neon-cyan animate-pulse" />
                  SCAN PHASES
                </h3>
                <div className="space-y-2">
                  {phases.map((phase) => (
                    <div
                      key={phase.id}
                      className={`w-full p-3 rounded-lg border transition-all ${
                        currentPhase === phase.id
                          ? "border-neon-cyan bg-neon-cyan/10 glow-border"
                          : phaseStatuses[phase.id] === "completed"
                            ? "border-green-400/30 bg-green-400/5"
                            : phaseStatuses[phase.id] === "error"
                              ? "border-red-400/30 bg-red-400/5"
                              : "border-border/50 bg-card/30"
                      }`}
                    >
                      <div className="flex items-center gap-3">
                        {getPhaseIcon(phaseStatuses[phase.id])}
                        <div className="flex-1 min-w-0">
                          <p className="text-sm font-medium truncate">{phase.name}</p>
                          <p className="text-xs text-muted-foreground font-mono">
                            {phaseStatuses[phase.id] === "running"
                              ? "In Progress..."
                              : phaseStatuses[phase.id] === "completed"
                                ? "Completed"
                                : phaseStatuses[phase.id] === "error"
                                  ? "Failed"
                                  : "Pending"}
                          </p>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              <div className="glow-card rounded-xl p-4">
                <h3 className="text-sm font-semibold text-neon-cyan mb-4">STATISTICS</h3>
                <div className="space-y-3">
                  {targetValidation !== "unknown" && (
                    <div className="flex justify-between items-center pb-3 border-b border-border/50">
                      <span className="text-xs text-muted-foreground">Target Status</span>
                      <span
                        className={`text-sm font-bold ${targetValidation === "valid" ? "text-green-400" : "text-red-400"}`}
                      >
                        {targetValidation === "valid" ? "VALID" : "INVALID"}
                      </span>
                    </div>
                  )}
                  <div className="flex justify-between items-center">
                    <span className="text-xs text-muted-foreground">Completed</span>
                    <span className="text-lg font-bold text-green-400">
                      {Object.values(phaseStatuses).filter((s) => s === "completed").length}
                    </span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-xs text-muted-foreground">Total Time</span>
                    <span className="text-lg font-bold text-neon-cyan">
                      {phaseResults.reduce((acc, r) => acc + r.execution_time_seconds, 0).toFixed(1)}s
                    </span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-xs text-muted-foreground">Target</span>
                    <span className="text-xs font-mono text-foreground truncate max-w-[120px]" title={url}>
                      {url}
                    </span>
                  </div>
                </div>
              </div>
            </div>

            <div className="lg:col-span-3 space-y-4 sm:space-y-6">
              {targetValidation === "invalid" && (
                <div className="glow-card rounded-xl p-4 sm:p-6 border-red-400/30">
                  <div className="flex items-start gap-3">
                    <XCircle className="h-6 w-6 text-red-400 flex-shrink-0 mt-0.5" />
                    <div>
                      <h3 className="font-semibold text-red-400 mb-2 text-lg">Target Invalid</h3>
                      <p className="text-sm text-muted-foreground mb-2">
                        The target <code className="text-neon-cyan">{url}</code> is not available or unreachable.
                      </p>
                      <p className="text-xs text-muted-foreground">
                        The scan has been stopped. Please verify the target URL and try again.
                      </p>
                    </div>
                  </div>
                </div>
              )}

              {currentPhase && (
                <div className="glow-card rounded-xl p-4 sm:p-6">
                  <div className="flex items-center gap-3 mb-4 sm:mb-6">
                    <Loader2 className="h-5 w-5 sm:h-6 sm:w-6 text-neon-cyan animate-spin" />
                    <div>
                      <h2 className="text-xl sm:text-2xl font-bold neon-text">
                        {phases.find((p) => p.id === currentPhase)?.name}
                      </h2>
                      <p className="text-xs sm:text-sm text-muted-foreground font-mono">Phase in progress...</p>
                    </div>
                  </div>
                  <div className="h-2 bg-background/50 rounded-full overflow-hidden">
                    <div
                      className="h-full bg-gradient-to-r from-neon-cyan to-blue-500 animate-pulse"
                      style={{ width: "60%" }}
                    />
                  </div>
                </div>
              )}

              {phaseResults.length > 0 && (
                <div className="grid grid-cols-1 xl:grid-cols-2 gap-4">
                  {phaseResults.map((result, index) => (
                    <ResultCard
                      key={index}
                      result={result}
                      language={language}
                      onViewJson={togglePhaseJson}
                      isJsonVisible={selectedPhaseForJson === result.phase}
                    />
                  ))}
                </div>
              )}

              {selectedPhaseForJson && getSelectedPhaseResult() && (
                <JsonViewer results={[getSelectedPhaseResult()!]} language={language} />
              )}

              {generatedReport && (
                <div className="glow-card rounded-xl p-4 sm:p-6">
                  <h2 className="text-xl sm:text-2xl font-bold neon-text mb-4">Security Report</h2>
                  <div className="flex items-center gap-2 mb-4 text-sm text-green-400">
                    <CheckCircle2 className="h-4 w-4" />
                    <span className="font-mono">Report automatically generated</span>
                  </div>
                  <div className="prose prose-invert max-w-none">
                    <pre className="text-xs sm:text-sm whitespace-pre-wrap bg-background/50 p-4 rounded-lg border border-neon-cyan/30 overflow-x-auto">
                      {generatedReport.report_content}
                    </pre>
                  </div>
                  <div className="mt-4 flex gap-2">
                    <Button
                      onClick={() => {
                        const blob = new Blob([generatedReport.report_content], { type: "text/plain" })
                        const url = URL.createObjectURL(blob)
                        const a = document.createElement("a")
                        a.href = url
                        a.download = `security-report-${generatedReport.report_id}.txt`
                        a.click()
                      }}
                      className="bg-neon-cyan/20 hover:bg-neon-cyan/30 border border-neon-cyan/50 text-neon-cyan"
                    >
                      <FileText className="h-4 w-4 mr-2" />
                      Download Report
                    </Button>
                  </div>
                </div>
              )}

              {Object.values(phaseStatuses).some((s) => s === "error") && !isScanning && (
                <div className="glow-card rounded-xl p-4 sm:p-6 border-red-400/30">
                  <div className="flex items-start gap-3">
                    <AlertCircle className="h-5 w-5 text-red-400 flex-shrink-0 mt-0.5" />
                    <div>
                      <h3 className="font-semibold text-red-400 mb-2">Connection Error</h3>
                      <p className="text-sm text-muted-foreground mb-2">
                        Unable to connect to the API server at <code className="text-neon-cyan">{API_URL}</code>
                      </p>
                      <p className="text-xs text-muted-foreground">
                        Please ensure the backend server is running and CORS is properly configured.
                      </p>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>
        )}
      </main>
    </div>
  )
}
